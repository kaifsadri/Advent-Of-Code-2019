puzzle = """59782619540402316074783022180346847593683757122943307667976220344797950034514416918778776585040527955353805734321825495534399127207245390950629733658814914072657145711801385002282630494752854444244301169223921275844497892361271504096167480707096198155369207586705067956112600088460634830206233130995298022405587358756907593027694240400890003211841796487770173357003673931768403098808243977129249867076581200289745279553289300165042557391962340424462139799923966162395369050372874851854914571896058891964384077773019120993386024960845623120768409036628948085303152029722788889436708810209513982988162590896085150414396795104755977641352501522955134675"""


def mulfactor(p, r, pattern=[0, 1, 0, -1]):
    """return the pth item in a r-repeated version of the pattern"""
    n = r * len(pattern)
    m = p % n
    return pattern[m // r]


phases = 100
result = puzzle
for p in range(phases):
    d = []
    for index in range(len(puzzle)):
        s = str(
            sum(
                [
                    int(result[i]) * mulfactor(i + 1, index + 1)
                    for i in range(len(puzzle))
                ]
            )
        )[-1]
        d.append(s)
    result = d

print("".join(result[0:8]))

